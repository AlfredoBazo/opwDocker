"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ModuleLoader = void 0;
const Module = require('module'); // tslint:disable-line:no-var-requires     No type definitions available
const path = require("path");
const Version_1 = require("./Version");
/**
 * @desc
 *  Dynamically loads Node modules located relative to `cwd`.
 */
class ModuleLoader {
    /**
     * @param {string} cwd
     *  Current working directory, relative to which Node modules should be resolved.
     */
    constructor(cwd) {
        this.cwd = cwd;
    }
    /**
     * @desc
     *  Returns true if a given module is available to be required, false otherwise.
     *
     * @param {string} moduleId
     *  NPM module id, for example 'cucumber' or '@serenity-js/core'
     */
    hasAvailable(moduleId) {
        try {
            return !!this.require(moduleId);
        }
        catch (e) {
            return false;
        }
    }
    /**
     * @desc
     *  Works like `require.resolve`, but relative to specified current working directory
     *
     * @param {string} moduleId
     *  NPM module id, for example `cucumber` or `@serenity-js/core`
     *
     * @returns {string}
     *  Path a given Node module
     */
    resolve(moduleId) {
        const fromFile = path.join(this.cwd, 'noop.js');
        return Module._resolveFilename(moduleId, {
            id: fromFile,
            filename: fromFile,
            paths: Module._nodeModulePaths(this.cwd),
        });
    }
    /**
     * @desc
     *  Works like `require`, but relative to specified current working directory
     *
     * @param {string} moduleId
     *
     * @returns {any}
     */
    require(moduleId) {
        try {
            return require(this.resolve(moduleId));
        }
        catch (e) {
            return require(moduleId);
        }
    }
    /**
     * @desc
     *  Returns {@link Version} of module specified by `moduleId`, based on its `package.json`.
     *
     * @param {string} moduleId
     * @returns {Version}
     */
    versionOf(moduleId) {
        return new Version_1.Version(this.require(`${moduleId}/package.json`).version);
    }
}
exports.ModuleLoader = ModuleLoader;
//# sourceMappingURL=ModuleLoader.js.map